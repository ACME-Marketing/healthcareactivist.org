---
// src/components/RepresentativeFinder.astro
---

<div class="bg-white rounded-lg shadow-lg p-8">
  <div class="mb-6">
    <h3 class="text-2xl font-bold font-heading text-primary mb-3">Find Your Representatives</h3>
    <p class="text-text leading-relaxed">Enter your ZIP code to find your elected officials and contact them about healthcare reform.</p>
  </div>
  
  <div class="space-y-6">
    <!-- ZIP Code Input -->
    <div>
      <label for="zip-lookup" class="block text-sm font-semibold text-primary mb-2">
        ZIP Code *
      </label>
      <div class="flex gap-3">
        <input 
          type="text" 
          id="zip-lookup"
          name="zipCode"
          required
          pattern="[0-9]{5}(-[0-9]{4})?"
          class="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-accent focus:border-accent transition-colors"
          placeholder="Enter your ZIP code"
        />
        <button 
          id="find-reps-btn"
          type="button" 
          class="btn-primary px-6 whitespace-nowrap"
        >
          Find Representatives
        </button>
      </div>
    </div>
    
    <!-- Loading State -->
    <div id="loading-state" class="hidden text-center py-8">
      <div class="inline-flex items-center">
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-accent" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Finding your representatives...
      </div>
    </div>
    
    <!-- Error State -->
    <div id="error-state" class="hidden bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg">
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <span>Unable to find representatives for this ZIP code. Please check your ZIP code and try again.</span>
      </div>
    </div>
    
    <!-- Representatives Results -->
    <div id="representatives-results" class="hidden space-y-4">
      <h4 class="text-lg font-bold font-heading text-primary">Your Representatives</h4>
      <div id="representatives-list" class="space-y-4">
        <!-- Representatives will be populated here -->
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const zipInput = document.getElementById('zip-lookup') as HTMLInputElement;
    const findBtn = document.getElementById('find-reps-btn') as HTMLButtonElement;
    const loadingState = document.getElementById('loading-state') as HTMLElement;
    const errorState = document.getElementById('error-state') as HTMLElement;
    const resultsDiv = document.getElementById('representatives-results') as HTMLElement;
    const resultsList = document.getElementById('representatives-list') as HTMLElement;
    
    if (!zipInput || !findBtn || !loadingState || !errorState || !resultsDiv || !resultsList) return;
    
    // Sample representative data (in a real app, this would come from an API)
    const sampleRepresentatives = [
      {
        name: "Senator Jane Smith",
        office: "U.S. Senate",
        party: "Democratic",
        phone: "(202) 224-1234",
        email: "senator.smith@senate.gov",
        website: "https://smith.senate.gov",
        photo: "https://via.placeholder.com/80x100/0A4C6A/FFFFFF?text=JS"
      },
      {
        name: "Senator John Doe",
        office: "U.S. Senate", 
        party: "Republican",
        phone: "(202) 224-5678",
        email: "senator.doe@senate.gov",
        website: "https://doe.senate.gov",
        photo: "https://via.placeholder.com/80x100/0A4C6A/FFFFFF?text=JD"
      },
      {
        name: "Rep. Maria Garcia",
        office: "U.S. House of Representatives",
        party: "Democratic",
        phone: "(202) 225-9876",
        email: "rep.garcia@house.gov",
        website: "https://garcia.house.gov",
        photo: "https://via.placeholder.com/80x100/0A4C6A/FFFFFF?text=MG"
      }
    ];
    
    function showLoading() {
      loadingState.classList.remove('hidden');
      errorState.classList.add('hidden');
      resultsDiv.classList.add('hidden');
    }
    
    function showError() {
      loadingState.classList.add('hidden');
      errorState.classList.remove('hidden');
      resultsDiv.classList.add('hidden');
    }
    
    function showResults(representatives: typeof sampleRepresentatives) {
      loadingState.classList.add('hidden');
      errorState.classList.add('hidden');
      resultsDiv.classList.remove('hidden');
      
      resultsList.innerHTML = representatives.map(rep => `
        <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
          <div class="flex items-start space-x-4">
            <img src="${rep.photo}" alt="${rep.name}" class="w-16 h-20 rounded-lg object-cover">
            <div class="flex-1">
              <div class="flex items-start justify-between">
                <div>
                  <h5 class="font-bold text-primary text-lg">${rep.name}</h5>
                  <p class="text-sm text-gray-600 mb-1">${rep.office}</p>
                  <p class="text-sm text-gray-600 mb-3">${rep.party} Party</p>
                </div>
              </div>
              
              <div class="space-y-2">
                <div class="flex items-center text-sm">
                  <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                  <a href="tel:${rep.phone}" class="text-accent hover:underline">${rep.phone}</a>
                </div>
                
                <div class="flex items-center text-sm">
                  <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                  </svg>
                  <a href="mailto:${rep.email}" class="text-accent hover:underline">${rep.email}</a>
                </div>
                
                <div class="flex items-center text-sm">
                  <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
                  </svg>
                  <a href="${rep.website}" target="_blank" class="text-accent hover:underline">Official Website</a>
                </div>
              </div>
              
              <div class="mt-4 flex space-x-3">
                <button 
                  class="btn-primary text-sm px-4 py-2 contact-rep-btn"
                  data-rep-name="${rep.name}"
                  data-rep-email="${rep.email}"
                >
                  Send Message
                </button>
                <a 
                  href="tel:${rep.phone}" 
                  class="btn-secondary text-sm px-4 py-2"
                >
                  Call Now
                </a>
              </div>
            </div>
          </div>
        </div>
      `).join('');
      
      // Add event listeners to contact buttons
      const contactButtons = resultsList.querySelectorAll('.contact-rep-btn') as NodeListOf<HTMLButtonElement>;
      contactButtons.forEach(button => {
        button.addEventListener('click', function() {
          const repName = this.dataset.repName;
          const repEmail = this.dataset.repEmail;
          
          // Scroll to contact form and pre-fill representative info
          const contactSection = document.getElementById('contact');
          if (contactSection) {
            contactSection.scrollIntoView({ behavior: 'smooth' });
            
            // Pre-fill form if it exists
            setTimeout(() => {
              const messageTextarea = document.querySelector('#representative-form-message') as HTMLTextAreaElement;
              if (messageTextarea && repName) {
                messageTextarea.value = `Dear ${repName},\n\nI am writing to you as your constituent to express my concerns about healthcare reform...\n\n`;
                messageTextarea.focus();
              }
            }, 500);
          }
        });
      });
    }
    
    function findRepresentatives() {
      const zipCode = zipInput.value.trim();
      
      if (!zipCode || !/^\d{5}(-\d{4})?$/.test(zipCode)) {
        showError();
        return;
      }
      
      showLoading();
      
      // Simulate API call
      setTimeout(() => {
        // In a real application, you would call an API like:
        // - Civic Information API (Google)
        // - ProPublica Congress API
        // - OpenStates API
        
        if (Math.random() > 0.1) { // 90% success rate for demo
          showResults(sampleRepresentatives);
        } else {
          showError();
        }
      }, 1500);
    }
    
    findBtn.addEventListener('click', findRepresentatives);
    
    zipInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        findRepresentatives();
      }
    });
    
    // Format ZIP code input
    zipInput.addEventListener('input', function() {
      let value = this.value.replace(/\D/g, '');
      if (value.length > 5) {
        value = value.slice(0, 5) + '-' + value.slice(5, 9);
      }
      this.value = value;
    });
  });
</script>