---
import BaseLayout from '../layouts/BaseLayout.astro';
import CourseNotificationModal from '../components/CourseNotificationModal.astro';
import { supabase } from '../lib/supabase.js';
import { getCta } from '../lib/loadCtaData.js';

const heroCta = getCta({ page: 'courses', location: 'hero' });

// Type definitions
interface CourseEpisode {
  id: string;
  title: string;
  episode_number: number;
  is_free: boolean;
  description: string;
}

interface Course {
  id: string;
  title: string;
  description: string;
  price: number;
  stripe_price_id: string;
  is_active: boolean;
  created_at: string;
  course_episodes?: CourseEpisode[];
}

// Fetch courses from Supabase
let courses: Course[] = [];
try {
  // First, let's fetch just the courses to see if the basic query works
  const { data: coursesData, error: coursesError } = await supabase
    .from('courses')
    .select('*')
    .eq('is_active', true)
    .order('created_at', { ascending: false });

  if (coursesError) {
    console.error('Error fetching courses:', coursesError);
  } else {
    courses = coursesData || [];
    console.log('Fetched courses:', courses.length, courses);
    
    // Now fetch episodes for each course separately
    for (let course of courses) {
      const { data: episodesData, error: episodesError } = await supabase
        .from('course_episodes')
        .select('id, title, episode_number, is_free, description')
        .eq('course_id', course.id)
        .order('episode_number', { ascending: true });
      
      if (episodesError) {
        console.error(`Error fetching episodes for course ${course.id}:`, episodesError);
        course.course_episodes = [];
      } else {
        course.course_episodes = episodesData || [];
      }
    }
  }
} catch (error) {
  console.error('Error in courses page:', error);
}
---

<BaseLayout title="Courses - ACME Marketing">
  <!-- Hero Section -->
  <section class="relative overflow-hidden bg-gradient-to-br from-cyan-500 via-blue-700 to-fuchsia-600 text-white py-20 px-6">
    <div class="absolute inset-0 z-0">
      <!-- Animated background elements -->
      <div class="absolute top-10 left-10 w-32 h-32 bg-white/10 rounded-full blur-xl animate-pulse"></div>
      <div class="absolute top-20 right-20 w-24 h-24 bg-cyan-300/20 rounded-full blur-lg animate-pulse delay-1000"></div>
      <div class="absolute bottom-10 left-1/4 w-40 h-40 bg-fuchsia-300/15 rounded-full blur-2xl animate-pulse delay-2000"></div>
    </div>
    
    <div class="relative z-10 container mx-auto max-w-6xl">
      <div class="text-center">
        <h1 class="text-5xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-white to-cyan-200 bg-clip-text text-transparent">
          AI Marketing Courses
        </h1>
        <p class="text-xl md:text-2xl mb-8 text-cyan-100 max-w-3xl mx-auto">
          Master AI-powered marketing with our comprehensive courses. Start with free episodes, then unlock the full potential.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <button id="open-consultation-modal-courses" class="bg-white text-blue-700 px-8 py-4 rounded-lg font-semibold hover:bg-cyan-100 transition duration-300 shadow-lg">
            Get Free Consultation
          </button>
          <a href="#courses" class="bg-transparent border-2 border-white text-white px-8 py-4 rounded-lg font-semibold hover:bg-white hover:text-blue-700 transition duration-300">
            Browse Courses
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- Courses Section -->
  <section id="courses" class="py-16 px-6 bg-gray-50">
    <div class="container mx-auto max-w-6xl">
      <div class="text-center mb-12">
        <h2 class="text-4xl font-bold text-gray-900 mb-4">Available Courses</h2>
        <p class="text-xl text-gray-600 max-w-2xl mx-auto">
          Each course starts with a free episode so you can experience our teaching style before committing.
        </p>
      </div>

      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {courses.map((course) => {
          const freeEpisode = course.course_episodes?.find(ep => ep.is_free);
          const totalEpisodes = course.course_episodes?.length || 0;
          const paidEpisodes = totalEpisodes - (freeEpisode ? 1 : 0);
          
          return (
            <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition duration-300">
              <!-- Course Header -->
              <div class="bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white">
                <h3 class="text-2xl font-bold mb-2">{course.title}</h3>
                <p class="text-blue-100 mb-4">{course.description}</p>
                <div class="flex items-center justify-between">
                  <span class="text-3xl font-bold">${course.price}</span>
                  <span class="bg-white/20 px-3 py-1 rounded-full text-sm">
                    {totalEpisodes} Episodes
                  </span>
                </div>
              </div>

              <!-- Course Content -->
              <div class="p-6">
                <div class="mb-4">
                  <h4 class="font-semibold text-gray-900 mb-2">What's Included:</h4>
                  <ul class="text-gray-600 space-y-1">
                    <li class="flex items-center">
                      <span class="text-green-500 mr-2">âœ“</span>
                      Free first episode
                    </li>
                    <li class="flex items-center">
                      <span class="text-green-500 mr-2">âœ“</span>
                      {paidEpisodes} additional episodes
                    </li>
                    <li class="flex items-center">
                      <span class="text-green-500 mr-2">âœ“</span>
                      Lifetime access
                    </li>
                    <li class="flex items-center">
                      <span class="text-green-500 mr-2">âœ“</span>
                      Certificate of completion
                    </li>
                  </ul>
                </div>

                {freeEpisode && (
                  <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                    <h5 class="font-semibold text-green-800 mb-2">Free Episode Available:</h5>
                    <p class="text-green-700 text-sm">
                      Episode {freeEpisode.episode_number}: {freeEpisode.title}
                    </p>
                  </div>
                )}

                <!-- Action Buttons -->
                <div class="space-y-3">
                  <a 
                    href={`/courses/${course.id}`}
                    class="block w-full bg-blue-600 text-white text-center py-3 px-6 rounded-lg font-semibold hover:bg-blue-700 transition duration-300"
                  >
                    View Course
                  </a>
                  <button 
                    onclick={`enrollInCourse('${course.id}', '${course.stripe_price_id}', ${course.price})`}
                    class="w-full bg-green-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-green-700 transition duration-300"
                  >
                    Enroll Now - ${course.price}
                  </button>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <!-- No Courses Message -->
      {courses.length === 0 && (
        <div class="text-center py-12">
          <div class="text-6xl mb-4">ðŸ“š</div>
          <h3 class="text-2xl font-semibold text-gray-900 mb-2">Courses Coming Soon</h3>
          <p class="text-gray-600 mb-6">
            We're preparing amazing AI marketing courses for you. Sign up to be notified when they launch!
          </p>
          <button id="open-course-notification-modal" class="bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition duration-300">
            Get Notified
          </button>
        </div>
      )}
    </div>
  </section>

  <!-- CTA Section -->
  <section class="py-16 px-6 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
    <div class="container mx-auto max-w-4xl text-center">
      <h2 class="text-3xl md:text-4xl font-bold mb-6">
        Ready to Transform Your Marketing with AI?
      </h2>
      <p class="text-xl mb-8 text-blue-100">
        Join thousands of marketers who are already using AI to create better content, 
        reach more customers, and grow their businesses faster.
      </p>
      <div class="flex flex-col sm:flex-row gap-4 justify-center">
        <button id="open-consultation-modal-courses-bottom" class="bg-white text-blue-700 px-8 py-4 rounded-lg font-semibold hover:bg-cyan-100 transition duration-300">
          Start Your AI Journey
        </button>
        <a href="/services" class="bg-transparent border-2 border-white text-white px-8 py-4 rounded-lg font-semibold hover:bg-white hover:text-blue-700 transition duration-300">
          Learn More
        </a>
      </div>
    </div>
  </section>
  
  <!-- Include Course Notification Modal -->
  <CourseNotificationModal />
</BaseLayout>

<script>
  import { supabase } from '../lib/supabase.js';

  // Course enrollment function
  async function enrollInCourse(courseId, stripePriceId, price) {
    try {
      // Check if user is authenticated
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        // Redirect to login/signup
        window.location.href = '/auth?redirect=/courses';
        return;
      }

      // Create Stripe checkout session via n8n
      const response = await fetch('/api/create-checkout-session', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          courseId,
          stripePriceId,
          price,
          userId: user.id,
          successUrl: `${window.location.origin}/courses/${courseId}?success=true`,
          cancelUrl: `${window.location.origin}/courses?canceled=true`
        })
      });

      const { url } = await response.json();
      
      if (url) {
        window.location.href = url;
      }
    } catch (error) {
      console.error('Error enrolling in course:', error);
      alert('There was an error processing your enrollment. Please try again.');
    }
  }

  // Add consultation modal buttons
  document.addEventListener('DOMContentLoaded', function() {
    const consultationButtons = [
      'open-consultation-modal-courses',
      'open-consultation-modal-courses-bottom'
    ];

    consultationButtons.forEach(buttonId => {
      const button = document.getElementById(buttonId);
      if (button) {
        button.addEventListener('click', function() {
          const modal = document.getElementById('consultation-form-modal');
          const pageInput = document.getElementById('consultation-page-of-click') as HTMLInputElement;
          if (modal && pageInput) {
            pageInput.value = 'courses';
            modal.classList.remove('hidden');
          }
        });
      }
    });

    // Add course notification modal button
    const notificationButton = document.getElementById('open-course-notification-modal');
    if (notificationButton) {
      notificationButton.addEventListener('click', function() {
        const showModal = (window as any).showCourseNotificationModal;
        if (showModal) {
          showModal();
        }
      });
    }
  });
</script> 