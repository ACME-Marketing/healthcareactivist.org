---
// @ts-nocheck
// This is an Astro file. Ignore linter errors about 'class' vs 'className'.
import BaseLayout from '../layouts/BaseLayout.astro'
import Hero from '../components/Hero.astro'
import HomepagePosts from '../components/HomepagePosts.astro'
import { graphQLClient, gql } from '../lib/graphql'
import { getCta } from '../lib/loadCtaData.js'

// GraphQL query for posts with tags "acmemarketing" or "all"
const GET_POSTS = gql`
  query GetPosts {
    posts(where: { tagSlugIn: ["acmemarketing", "all"] }) {
      nodes {
        title
        uri
        content
        featuredImage {
          node {
            sourceUrl
            altText
            mediaDetails {
              width
              height
            }
          }
        }
        tags {
          nodes {
            name
            slug
          }
        }
      }
    }
  }
`

let posts = []
try {
  const data = await graphQLClient.request(GET_POSTS)
  posts = data.posts.nodes
  console.log("Fetched posts for acmemarketing.us:", posts)
  
  // Debug: Log each post title and URI to check for duplicates
  console.log("Post details:")
  posts.forEach((post, index) => {
    console.log(`${index + 1}. Title: "${post.title}" | URI: "${post.uri}"`)
  })
  
  // Check for exact duplicates (same URI)
  const uriCounts = {}
  posts.forEach(post => {
    uriCounts[post.uri] = (uriCounts[post.uri] || 0) + 1
  })
  
  console.log("URI counts:", uriCounts)
  
  // Remove duplicate posts based on URI
  const uniquePosts = posts.filter((post, index, self) => 
    index === self.findIndex(p => p.uri === post.uri)
  )
  
  if (uniquePosts.length !== posts.length) {
    console.log(`Removed ${posts.length - uniquePosts.length} duplicate posts`)
    console.log("Final unique posts:")
    uniquePosts.forEach((post, index) => {
      console.log(`${index + 1}. Title: "${post.title}" | URI: "${post.uri}"`)
    })
  }
  
  posts = uniquePosts
} catch (error) {
  console.error("Error fetching posts:", error)
}

const heroCta = getCta({ page: 'home', location: 'hero' })
const sidebarCta = getCta({ page: 'home', location: 'sidebar' })
const bottomCta = getCta({ page: 'home', location: 'bottom' })
---

<BaseLayout title="ACME Marketing">
  <Hero />
  <div class="w-full relative overflow-hidden">
    <!-- Gradient pulse background -->
    <div class="absolute inset-0 animate-gradient bg-gradient-to-br from-cyan-500 via-blue-700 to-fuchsia-600 opacity-15 pointer-events-none"></div>
    <!-- Content with relative positioning to stay above wave -->
    <div class="relative z-10">
      <HomepagePosts posts={posts} />
    </div>
  </div>
  <!-- Bottom CTA Section -->
  <section class="w-full flex justify-center mt-16 mb-0">
    <div class="max-w-2xl w-full bg-gradient-to-br from-cyan-500 to-blue-700 text-white rounded-3xl shadow-2xl p-10 flex flex-col items-center gap-4 border-2 border-blue-200">
      <h3 class="text-3xl font-bold mb-2 text-center">{bottomCta['TITLE']}</h3>
      <p class="text-lg mb-4 text-center">{bottomCta['DESCRIPTION']}</p>
      <a href="#" id="open-ebook-modal-bottom" class="inline-block bg-white text-blue-800 font-bold py-3 px-8 rounded-full text-lg hover:bg-gray-100 transition transform hover:scale-105 shadow" data-book-id={bottomCta['BOOK ID']}>
        {bottomCta['BUTTON TEXT']}
      </a>
    </div>
  </section>
</BaseLayout>

<style>
  @keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  .animate-gradient {
    background-size: 200% 200%;
    animation: gradient 8s ease-in-out infinite;
    animation-fill-mode: both;
    animation-iteration-count: infinite;
  }
</style>
