---
// @ts-nocheck
// This is an Astro file. Ignore linter errors about 'class' vs 'className'.
import MotionReveal from '../../components/MotionReveal';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { graphQLClient, gql } from '../../lib/graphql';
import { getCta } from '../../lib/loadCtaData.js';

// Function to process content and add target="_blank" to external links
function processExternalLinks(content) {
  if (!content) return content;
  
  // Replace external links with target="_blank" and rel="noopener noreferrer"
  return content.replace(
    /<a\s+href="(https?:\/\/[^"]+)"([^>]*)>/gi,
    '<a href="$1" target="_blank" rel="noopener noreferrer"$2>'
  );
}

export async function getStaticPaths() {
  const GET_FILTERED_POST_URIS = gql`
    query GetFilteredPostUris {
      posts(where: { tagSlugIn: ["acmemarketing", "all"] }) {
        nodes {
          uri
        }
      }
    }
  `;

  const data = await graphQLClient.request(GET_FILTERED_POST_URIS);

  return data.posts.nodes.map((post) => ({
    params: { slug: post.uri.replace(/^\/|\/$/g, '') },
  }));
}

const GET_SINGLE_POST = gql`
  query GetSinglePost($uri: String!) {
    postBy(uri: $uri) {
      title
      content
      featuredImage {
        node {
          sourceUrl
          altText
          mediaDetails {
            width
            height
          }
        }
      }
      tags {
        nodes {
          name
          slug
        }
      }
    }
  }
`;

const { slug } = Astro.params;
const uri = `/${slug}/`;

console.log("Attempting to fetch post with URI:", uri);
console.log("Slug from params:", slug);

let post = null;
let allPosts = [];

try {
  const data = await graphQLClient.request(GET_SINGLE_POST, { uri });
  post = data.postBy;
  console.log("Successfully fetched post:", post?.title);
  console.log("Post content preview:", post?.content?.substring(0, 200));
  console.log("Post content length:", post?.content?.length);

  const GET_ALL_POSTS = gql`
    query GetAllPosts {
      posts(first: 100, where: { tagSlugIn: ["acmemarketing", "all"] }) {
        nodes {
          title
          uri
          tags {
            nodes {
              slug
            }
          }
        }
      }
    }
  `;

  const allPostsData = await graphQLClient.request(GET_ALL_POSTS);
  allPosts = allPostsData.posts.nodes;
} catch (error) {
  console.error("Error fetching post or all posts:", error);
  console.error("URI that failed:", uri);
  console.error("Slug that failed:", slug);
}

if (!post) {
  return Astro.redirect('/404');
}

const currentPostIndex = allPosts.findIndex(p => p.uri.replace(/^\/|\/$/g, '') === slug);
const prevPost = currentPostIndex > 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost = currentPostIndex < allPosts.length - 1 ? allPosts[currentPostIndex + 1] : null;
const sidebarPosts = allPosts.filter(p => p.uri.replace(/^\/|\/$/g, '') !== slug).slice(0, 5);

const heroCta = getCta({ page: 'post', location: 'hero' });
const sidebarCta = getCta({ page: 'post', location: 'sidebar' });
const bottomCta = getCta({ page: 'post', location: 'bottom' });
---

<BaseLayout title={post.title}>
  <div class="w-full">
    <!-- HERO SECTION: AI SIZZLE -->
    <section class="relative overflow-hidden min-h-[420px] flex flex-col justify-center items-center text-center py-8 md:py-12 px-4">
      <!-- Animated Gradient Background -->
      <div class="absolute inset-0 z-0 animate-gradient bg-gradient-to-br from-cyan-500 via-blue-700 to-fuchsia-600 opacity-90"></div>
      <!-- Rifle Scope AI SVG Icon -->
      <div class="relative z-10 mb-3 md:mb-4 flex justify-center">
        <svg class="w-12 h-12 md:w-16 md:h-16" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
          <circle cx="40" cy="40" r="32" fill="#fff" fill-opacity="0.08" stroke="#22d3ee" stroke-width="2"/>
          <circle cx="40" cy="40" r="38" stroke="#22d3ee" stroke-width="1" fill="none"/>
          <line x1="40" y1="18" x2="40" y2="62" stroke="#fff" stroke-width="2" stroke-linecap="round"/>
          <line x1="18" y1="40" x2="62" y2="40" stroke="#fff" stroke-width="2" stroke-linecap="round"/>
          <line x1="40" y1="10" x2="40" y2="18" stroke="#22d3ee" stroke-width="1.5"/>
          <line x1="40" y1="62" x2="40" y2="70" stroke="#22d3ee" stroke-width="1.5"/>
          <line x1="10" y1="40" x2="18" y2="40" stroke="#22d3ee" stroke-width="1.5"/>
          <line x1="62" y1="40" x2="70" y2="40" stroke="#22d3ee" stroke-width="1.5"/>
        </svg>
      </div>
      <!-- Post Title (wraps, never cut off) -->
      <h1 class="relative z-10 text-2xl md:text-3xl lg:text-4xl font-extrabold text-white leading-tight break-words whitespace-normal max-w-3xl mb-4 md:mb-6 mt-2" style="word-break: break-word;">
        {post.title}
      </h1>
      <!-- Add extra space below title -->
      <div class="h-2 md:h-3"></div>
      <!-- Animated CTA Button -->
      <a href="#" id="open-ebook-modal-post" class="relative z-10 inline-block bg-white text-blue-800 font-bold py-2 md:py-2 px-5 md:px-6 rounded-full text-sm md:text-base hover:bg-gray-100 transition transform hover:scale-105 shadow mb-2 md:mb-3" data-book-id={heroCta['BOOK ID']}>
        {heroCta['BUTTON TEXT']}
      </a>
      <!-- Tagline below CTA -->
      <div class="relative z-10 text-white/80 text-xs md:text-sm font-semibold mt-1 md:mt-2">
        {heroCta['DESCRIPTION']}
      </div>
    </section>

    <style>
    @keyframes gradient {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    .animate-gradient {
      background-size: 200% 200%;
      animation: gradient 8s ease-in-out infinite;
      animation-fill-mode: both;
      animation-iteration-count: infinite;
    }
    @keyframes typewriter {
      from { width: 0; }
      to { width: 100%; }
    }
    .animate-typewriter {
      display: inline-block;
      overflow: hidden;
      white-space: nowrap;
      border-right: 2px solid #fff;
      width: 0;
      animation: typewriter 2.5s steps(40, end) 0.5s 1 normal both;
    }
    @keyframes fadein {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .animate-fadein {
      animation: fadein 1.2s 1.5s both;
    }
    @keyframes ai-pulse {
      0%, 100% { filter: drop-shadow(0 0 0px #fff); }
      50% { filter: drop-shadow(0 0 16px #fff); }
    }
    .animate-ai-pulse {
      animation: ai-pulse 2.5s infinite;
    }
    @keyframes spin-slow {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .animate-spin-slow {
      transform-origin: 40px 40px;
      animation: spin-slow 8s linear infinite;
    }
    @keyframes cta-pulse {
      0%, 100% { box-shadow: 0 0 0 0 rgba(59,130,246,0.4); }
      50% { box-shadow: 0 0 0 12px rgba(59,130,246,0.1); }
    }
    .animate-cta-pulse {
      animation: cta-pulse 2.2s infinite;
    }
    </style>

    <!-- Main Layout -->
    <div class="w-full py-16 relative overflow-hidden">
      <!-- Gradient pulse background -->
      <div class="absolute inset-0 animate-gradient bg-gradient-to-br from-cyan-500 via-blue-700 to-fuchsia-600 opacity-15 pointer-events-none"></div>
      <!-- Content with relative positioning to stay above wave -->
      <div class="container mx-auto px-4 flex flex-col lg:flex-row gap-12 relative z-10">
        <main class="lg:w-3/4">
          <article class="bg-white rounded-3xl shadow-2xl p-10 prose prose-xl max-w-none prose-blue">
            {post.featuredImage?.node?.sourceUrl && (
              <div class="mb-8">
                <img
                  src={post.featuredImage.node.sourceUrl}
                  alt={post.featuredImage.node.altText || post.title}
                  width={post.featuredImage.node.mediaDetails?.width || 800}
                  height={post.featuredImage.node.mediaDetails?.height || 600}
                  class="w-full h-auto rounded-xl shadow-lg"
                />
              </div>
            )}
            <div set:html={processExternalLinks(post.content)}></div>
            {!post.content && (
              <div class="text-red-600 p-4 border border-red-400 rounded">
                <strong>Warning:</strong> No content found for this post!
              </div>
            )}
          </article>

          <!-- CTA -->
          <section class="mt-10 mb-10 rounded-2xl p-6 bg-gradient-to-br from-cyan-500 to-blue-700 text-white shadow-xl flex flex-col items-center gap-3">
            <h3 class="text-2xl font-bold mb-1 text-center">{bottomCta['TITLE']}</h3>
            <p class="text-base mb-3 text-center max-w-xl">{bottomCta['DESCRIPTION']}</p>
            <a href="#" id="open-ebook-modal-post" class="inline-block bg-white text-blue-800 font-bold py-2 px-6 rounded-full text-base hover:bg-gray-100 transition transform hover:scale-105 shadow" data-book-id={bottomCta['BOOK ID']}>
              {bottomCta['BUTTON TEXT']}
            </a>
          </section>

          <!-- Prev/Next Navigation -->
          <div class="flex justify-between mt-14 text-blue-600 font-semibold text-lg">
            {prevPost && (
              <a href={`/posts/${prevPost.uri.replace(/^\/|\/$/g, '')}`} class="hover:underline">
                &laquo; {prevPost.title}
              </a>
            )}
            {nextPost && (
              <a href={`/posts/${nextPost.uri.replace(/^\/|\/$/g, '')}`} class="hover:underline ml-auto">
                {nextPost.title} &raquo;
              </a>
            )}
          </div>
        </main>

        <!-- Sidebar -->
        <aside class="lg:w-1/4 space-y-8">
          <div class="bg-white p-6 rounded-3xl shadow-xl border border-blue-100">
            <h3 class="text-2xl font-bold mb-4 text-gray-900">Recent Posts</h3>
            <ul class="space-y-3">
              {sidebarPosts.map((p) => (
                <li>
                  <a href={`/posts/${p.uri.replace(/^\/|\/$/g, '')}`} class="text-blue-600 hover:underline font-medium">
                    {p.title}
                  </a>
                </li>
              ))}
            </ul>
          </div>

          <div class="bg-gradient-to-br from-cyan-100 to-blue-200 p-6 rounded-3xl border-l-4 border-blue-500 shadow-lg">
            <h4 class="text-xl font-bold text-blue-800 mb-2">{sidebarCta['TITLE']}</h4>
            <p class="text-sm text-gray-800 mb-4">
              {sidebarCta['DESCRIPTION']}
            </p>
            <a href="#" id="open-ebook-modal-sidebar" class="inline-block bg-blue-600 text-white font-bold py-2 px-5 rounded-full text-sm hover:bg-blue-700 transition" data-book-id={sidebarCta['BOOK ID']}>
              {sidebarCta['BUTTON TEXT']}
            </a>
          </div>
        </aside>
      </div>
    </div>
  </div>
</BaseLayout>
